src/ai/contextSuggestions.ts:// Ask Gemini for deployment and integration advice based on context
src/ai/contextSuggestions.ts:  // Build a plain English prompt for Gemini
src/ai/deploymentOrchestrator.ts:  // Use AI to plan deployment (Gemini + LangChain)
src/ai/fieldMarshall.ts:// Field Marshall: Orchestrates Gemini, MCP, and LangChain for project automation
src/ai/fieldMarshall.ts:  // Chat with Gemini persona (e.g., onboarding, help)
src/ai/fieldMarshall.ts:  // Scaffold project using Gemini
src/ai/genkit.ts:// Gemini AI orchestration utility for codegen, planning, chat, etc.
src/ai/genkit.ts:import { Gemini } from "@genkit-ai/client";
src/ai/genkit.ts:const gemini = new Gemini({ apiKey: process.env.GEMINI_API_KEY });
src/app/api/gemini/route.ts:    console.error('Gemini API error:', error?.message || error);
src/app/api/gemini/route.ts:      reply: '‚ö†Ô∏è Gemini failed to respond. You may have hit a quota limit or model restriction.'
src/app/api/gemini/askGemini.ts:export async function askGemini(prompt: string): Promise<string> {
src/app/api/gemini/askGemini.ts:  // TODO: Replace with actual Gemini API call
src/app/api/gemini/askGemini.ts:  return `üß† Gemini placeholder response for: "${prompt}"`;
src/app/api/gemini/gemini.ts:import { askGemini } from '@/app/api/gemini/askGemini';
src/app/api/gemini/gemini.ts:    const reply = await askGemini(prompt);
src/app/api/gemini/gemini.ts:      model: "Gemini",
src/app/api/gemini/gemini.ts:      reply: "‚ö†Ô∏è Gemini failed to respond.",
src/app/api/gemini/quotaPulse.ts:// üîÆ Embedded Gemini Quota Fetch Logic (No External Module)
src/app/api/gemini/quotaPulse.ts:async function getGeminiQuota(): Promise<{
src/app/api/gemini/quotaPulse.ts:    // TODO: Replace with actual Gemini API call
src/app/api/gemini/quotaPulse.ts:    console.warn("‚ö†Ô∏è Gemini quota fetch failed", err);
src/app/api/gemini/quotaPulse.ts:  const quota = await getGeminiQuota();
src/core/agents/GeminiAgent.ts:export const GeminiAgent = {
src/core/gemini/GeminiOrchestrator.ts:import { GeminiAgent } from '../agents/GeminiAgent'; // Stubbed for now
src/core/gemini/GeminiOrchestrator.ts:export async function invokeGemini(prompt: string, context: Record<string, any> = {}) {
src/core/gemini/GeminiOrchestrator.ts:    const response = await GeminiAgent.invoke(prompt, context); // Replace with actual call
